# coding=utf-8

import numpy as np
import os
from scipy.io import FortranFile


def ExtractValue(text, reference):
    """ This function extracts the value for a given reference string for the
        text string given and returns it as a float number
        text        Text to search
        reference   Reference string
        """
    for a in text:
        if reference in a:
            res = a.replace(reference, "")

    return float(res)


class RADIANCE(object):
    """ Read the normalized radiances
        """

    def __init__(self, resroot, filename):
        """ Read the normalized radiacnes

            resroot     OSOAA results root directory.
            filename    Filename to look for the results.


            These coefficients are adjusted to a phase function truncation if
            applied.
            """

        self.ang, self.I, self.Q, self.U = np.genfromtxt(resroot+"/SOS/"+filename,
                                                         unpack=True,
                                                         encoding="iso-8859-15")

class TRASMITANCE(object):
    """ Read the transmitances"""

    def __init__(self, resroot, filename):
        """ Read the normalized radiacnes

            resroot     OSOAA results root directory.
            filename    Filename to look for the results.


            These coefficients are adjusted to a phase function truncation if
            applied.
            """
        with open(resroot+"/SOS/"+filename,
                  encoding="iso-8859-15") as file:
            self.fulltext = file.readlines()

        self.solang = ExtractValue(self.fulltext,
                                    "Solar Zenithal Angle  :")
        self.Tdown = ExtractValue(self.fulltext,
                                    "Direct transmission  TOA -> surface :")
        self.tdownang = float(self.fulltext[4].split()[2])
        self.tdownval = float(self.fulltext[4].split()[5])

        ang = np.array([])
        trans = np.array([])
        for s in self.fulltext[7:]:
            ang = np.append(ang, float(s.split()[2]))
            trans = np.append(trans, float(s.split()[5]))

        self.tang = ang
        self.ttrans = trans


class OUTPUTS(object):
    """ This class contains the standard and advanced outputs generated by the
        OSOAA software"""

    def __init__(self, resroot, filenames):
        """ This methods inits the output class with all the avalaible outputs.
            resroot     Results root Directory
            filenames   Object with all filenames
            """

        self.up = RADIANCE(resroot, filenames.advup)
        self.down = RADIANCE(resroot, filenames.advdown)
        self.trans = TRASMITANCE(resroot, filenames.trans)
